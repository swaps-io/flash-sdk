/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Flash API (v0)
 * Main API of Flash project (v0)
 * OpenAPI spec version: v0.1.0
 */
import { axiosClientMainV0 } from '../client/axios/main-v0';

export type GetCollateralMainV0Params = {
  collateral_chain_id: string;
  distribution_chain_id: string;
};

export type GetBalanceMainV0Params = {
  chain_id: string;
  token_address: string;
};

export type GetUserSwapsMainV0Params = {
  limit?: number;
  cursor?: string | null;
  signed_only?: boolean;
};

export type GetStatesMainV0Params = {
  hashes: string[];
};

export type ConfirmSwapMainV0Params = {
  from_proof: string;
  to_proof: string;
  address?: string | null;
};

export type LiqSlashMainV0Params = {
  from_proof: string;
  to_proof: string;
};

export type SlashMainV0Params = {
  reporter: string;
  from_proof: string;
  to_proof: string;
};

export type ReportNoSendMainV0Params = {
  reporter: string;
};

export type LiqSendMainV0Params = {
  liquidator: string;
  permit_transaction?: string | null;
};

export type GetQuoteMainV0Params = {
  from_chain_id: string;
  to_chain_id: string;
  from_token_address: string;
  to_token_address: string;
  from_amount?: string | null;
  to_amount?: string | null;
  from_actor?: string | null;
  from_actor_receiver?: string | null;
  from_actor_wallet_owner?: string | null;
  from_actor_receiver_wallet_owner?: string | null;
  permit_transaction?: string | null;
};

export type GetPermitTransactionMainV0Params = {
  chain_id: string;
  token_address: string;
  actor_address: string;
  mode?: PermitModeMainV0;
  amount?: string | null;
  contract_address?: string | null;
  deadline: number;
  permit_signature: string;
};

export type GetPermitDataMainV0Params = {
  chain_id: string;
  token_address: string;
  actor_address: string;
  mode?: PermitModeMainV0;
  amount?: string | null;
  contract_address?: string | null;
};

export type GetApproveMainV0Params = {
  chain_id: string;
  token_address: string;
  actor_address: string;
  amount?: string | null;
  p2_contract?: boolean;
  contract_address?: string | null;
};

export type GetAllowanceMainV0Params = {
  chain_id: string;
  token_address: string;
  actor_address: string;
  contract_address?: string | null;
};

export type ValidationErrorMainV0LocItem = string | number;

export interface ValidationErrorMainV0 {
  loc: ValidationErrorMainV0LocItem[];
  msg: string;
  type: string;
}

export type TransactionDataMainV0Value = string | null;

export interface TransactionDataMainV0 {
  chain_id: string;
  data: string;
  value: TransactionDataMainV0Value;
  to_address: string;
  from_address: string;
}

export interface TransactionMainV0 {
  txid: string;
  chain_id: string;
  created_at: number;
  confirmed: boolean;
}

export type SwapStatesMainV0States = { [key: string]: string };

export interface SwapStatesMainV0 {
  states: SwapStatesMainV0States;
}

export type SwapStateMainV0 = (typeof SwapStateMainV0)[keyof typeof SwapStateMainV0];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SwapStateMainV0 = {
  awaiting_signature: 'awaiting_signature',
  awaiting_bitcoin_lock: 'awaiting_bitcoin_lock',
  awaiting_receive: 'awaiting_receive',
  awaiting_send: 'awaiting_send',
  awaiting_liq_send: 'awaiting_liq_send',
  cancelled_no_slash: 'cancelled_no_slash',
  cancelled_awaiting_slash: 'cancelled_awaiting_slash',
  cancelled_slashed: 'cancelled_slashed',
  completed_sent: 'completed_sent',
  completed_liq_sent: 'completed_liq_sent',
  cancelled_refunded: 'cancelled_refunded',
} as const;

export type SwapListMainV0Cursor = string | null;

export interface SwapListMainV0 {
  swaps: SwapMainV0[];
  cursor: SwapListMainV0Cursor;
}

export interface SwapDataMainV0 {
  hash: string;
  data: string;
}

export type SwapMainV0TxRefund = TransactionMainV0 | null;

export type SwapMainV0TxSlash = SlashTransactionMainV0 | null;

export type SwapMainV0TxLiqSend = LiqSendTransactionMainV0 | null;

export type SwapMainV0TxSend = TransactionMainV0 | null;

export type SwapMainV0TxReceive = TransactionMainV0 | null;

export type SwapMainV0TxLockBitcoin = TransactionMainV0 | null;

export type SwapMainV0DeadlineLockBitcoin = number | null;

export type SwapMainV0TimeToLockBitcoin = number | null;

export type SwapMainV0ToActorBitcoin = string | null;

export type SwapMainV0FromActorWalletOwner = string | null;

export type SwapMainV0FromActorReceiverWalletOwner = string | null;

export type SwapMainV0FromActorBitcoin = string | null;

export interface SwapMainV0 {
  hash: string;
  created_at: number;
  from_chain_id: string;
  from_token_address: string;
  from_amount: string;
  from_actor: string;
  from_actor_bitcoin: SwapMainV0FromActorBitcoin;
  from_actor_receiver: string;
  from_actor_wallet_owner?: SwapMainV0FromActorWalletOwner;
  from_actor_receiver_wallet_owner?: SwapMainV0FromActorReceiverWalletOwner;
  to_chain_id: string;
  to_token_address: string;
  to_amount: string;
  to_actor: string;
  to_actor_bitcoin: SwapMainV0ToActorBitcoin;
  collateral_chain_id: string;
  collateral_amount: string;
  collateral_rewardable: string;
  collateral_receiver: string;
  time_estimate: number;
  time_to_lock_bitcoin: SwapMainV0TimeToLockBitcoin;
  time_to_receive: number;
  time_to_send: number;
  time_to_liq_send: number;
  deadline_lock_bitcoin: SwapMainV0DeadlineLockBitcoin;
  deadline_receive: number;
  deadline_send: number;
  deadline_liq_send: number;
  from_fee_estimate: string;
  to_fee_estimate: string;
  amount_source: AmountSourceMainV0;
  nonce: number;
  state: SwapStateMainV0;
  tx_lock_bitcoin: SwapMainV0TxLockBitcoin;
  tx_receive: SwapMainV0TxReceive;
  tx_send: SwapMainV0TxSend;
  tx_liq_send: SwapMainV0TxLiqSend;
  tx_report_no_send: ReportNoSendTransactionMainV0[];
  tx_slash: SwapMainV0TxSlash;
  tx_refund: SwapMainV0TxRefund;
}

export type SubmitSwapMainV0Signature = string | null;

export interface SubmitSwapMainV0 {
  signature?: SubmitSwapMainV0Signature;
  raise_on_error?: boolean;
}

export interface SmartWalletChainsMainV0 {
  chain_ids: string[];
}

export interface SlashTransactionMainV0 {
  txid: string;
  chain_id: string;
  created_at: number;
  confirmed: boolean;
  report_no_send_index: number;
}

export interface ResolverMainV0 {
  address: string;
  name: string;
  icon: string;
}

export interface ResolverListMainV0 {
  resolvers: ResolverMainV0[];
}

export interface ReportNoSendTransactionMainV0 {
  txid: string;
  chain_id: string;
  created_at: number;
  confirmed: boolean;
  reporter: string;
}

export type QuoteMainV0FromActorWalletOwner = string | null;

export type QuoteMainV0FromActorReceiverWalletOwner = string | null;

export type QuoteMainV0FromActorReceiver = string | null;

export type QuoteMainV0FromActor = string | null;

export type QuoteMainV0TimeToLockBitcoin = number | null;

export interface QuoteMainV0 {
  from_chain_id: string;
  from_token_address: string;
  from_amount: string;
  to_chain_id: string;
  to_token_address: string;
  to_amount: string;
  collateral_chain_id: string;
  collateral_amount: string;
  time_estimate: number;
  to_actor: string;
  time_to_lock_bitcoin: QuoteMainV0TimeToLockBitcoin;
  time_to_receive: number;
  time_to_send: number;
  time_to_liq_send: number;
  from_fee_estimate: string;
  to_fee_estimate: string;
  amount_source: AmountSourceMainV0;
  from_actor?: QuoteMainV0FromActor;
  from_actor_receiver?: QuoteMainV0FromActorReceiver;
  from_actor_wallet_owner?: QuoteMainV0FromActorWalletOwner;
  from_actor_receiver_wallet_owner?: QuoteMainV0FromActorReceiverWalletOwner;
}

export interface PermitTransactionMainV0 {
  transaction: string;
}

export type PermitModeMainV0 = (typeof PermitModeMainV0)[keyof typeof PermitModeMainV0];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PermitModeMainV0 = {
  permit: 'permit',
  permit2: 'permit2',
} as const;

export type PermitDataMainV0Amount = string | null;

export interface PermitDataMainV0 {
  chain_id: string;
  token_address: string;
  actor_address: string;
  contract_address: string;
  amount: PermitDataMainV0Amount;
  deadline: number;
  permit_data: string;
  mode: PermitModeMainV0;
}

export interface LiqSendTransactionMainV0 {
  txid: string;
  chain_id: string;
  created_at: number;
  confirmed: boolean;
  liquidator: string;
}

export interface HTTPValidationErrorMainV0 {
  detail?: ValidationErrorMainV0[];
}

export interface EventCreatedMainV0 {
  ok: boolean;
}

export type CustomExceptionExtraDataMainV0Details = CustomExceptionDetailsMainV0 | null;

export interface CustomExceptionExtraDataMainV0 {
  message: string;
  error_type: string;
  error_code: string;
  details?: CustomExceptionExtraDataMainV0Details;
}

export type CustomExceptionDetailsMainV0MaxSizeInTokenDecimal = number | null;

export type CustomExceptionDetailsMainV0MaxSizeInUsd = number | null;

export interface CustomExceptionDetailsMainV0 {
  max_size_in_usd?: CustomExceptionDetailsMainV0MaxSizeInUsd;
  max_size_in_token_decimal?: CustomExceptionDetailsMainV0MaxSizeInTokenDecimal;
}

export type CustomExceptionMainV0ExtraData = CustomExceptionExtraDataMainV0 | null;

export interface CustomExceptionMainV0 {
  detail: string;
  extra_data?: CustomExceptionMainV0ExtraData;
}

export interface CreateTMMainV0 {
  d: string[];
  c: string;
  a: string;
}

export type CreateSwapMainV0PermitTransaction = string | null;

export type CreateSwapMainV0CollateralReceiver = string | null;

export type CreateSwapMainV0FromActorReceiverWalletOwner = string | null;

export type CreateSwapMainV0FromActorWalletOwner = string | null;

export type CreateSwapMainV0FromActorReceiver = string | null;

export type CreateSwapMainV0FromActorBitcoin = string | null;

export type CreateSwapMainV0ToAmount = string | null;

export type CreateSwapMainV0FromAmount = string | null;

export interface CreateSwapMainV0 {
  from_chain_id: string;
  from_token_address: string;
  from_amount?: CreateSwapMainV0FromAmount;
  to_amount?: CreateSwapMainV0ToAmount;
  /** @pattern ^(0x)[a-fA-F0-9]{40}$ */
  from_actor: string;
  from_actor_bitcoin?: CreateSwapMainV0FromActorBitcoin;
  from_actor_receiver?: CreateSwapMainV0FromActorReceiver;
  from_actor_wallet_owner?: CreateSwapMainV0FromActorWalletOwner;
  from_actor_receiver_wallet_owner?: CreateSwapMainV0FromActorReceiverWalletOwner;
  collateral_receiver?: CreateSwapMainV0CollateralReceiver;
  to_chain_id: string;
  to_token_address: string;
  permit_transaction?: CreateSwapMainV0PermitTransaction;
}

export interface CreateAgreementUserMainV0 {
  /** @pattern ^(0x)[a-fA-F0-9]{40}$ */
  address: string;
  signature: string;
}

export interface CollateralInfoMainV0 {
  collateral_chain_id: string;
  distribution_chain_id: string;
  actor_address: string;
  collateral_token_address: string;
  unlocked_amount: string;
  locked_amount: string;
  available_withdraw_amount: string;
  balance: string;
}

export interface BalanceInfoMainV0 {
  chain_id: string;
  token_address: string;
  actor_address: string;
  balance: string;
}

export type AmountSourceMainV0 = (typeof AmountSourceMainV0)[keyof typeof AmountSourceMainV0];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AmountSourceMainV0 = {
  from: 'from',
  to: 'to',
} as const;

export type AllowanceInfoMainV0AllowanceP2 = string | null;

export type AllowanceInfoMainV0ContractAddress = string | null;

export interface AllowanceInfoMainV0 {
  chain_id: string;
  token_address: string;
  actor_address: string;
  contract_address: AllowanceInfoMainV0ContractAddress;
  allowance: string;
  allowance_p2: AllowanceInfoMainV0AllowanceP2;
  allowance_updatable?: boolean;
}

export type AlertMainV0Message = string | null;

export interface AlertMainV0 {
  message: AlertMainV0Message;
}

export type AgreementUserMainV0Signature = string | null;

export interface AgreementUserMainV0 {
  address: string;
  message: string;
  signature: AgreementUserMainV0Signature;
}

export interface AgreementMessageMainV0 {
  message: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Returns token allowance
 * @summary Get allowance
 */
export const getAllowanceMainV0 = (
  params: GetAllowanceMainV0Params,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<AllowanceInfoMainV0>({ url: `/api/v0/allowance`, method: 'GET', params }, options);
};

/**
 * Returns call data to approve token
 * @summary Get approve
 */
export const getApproveMainV0 = (
  params: GetApproveMainV0Params,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<TransactionDataMainV0>({ url: `/api/v0/approve`, method: 'GET', params }, options);
};

/**
 * Returns token permit data to sign
 * @summary Get permit data
 */
export const getPermitDataMainV0 = (
  params: GetPermitDataMainV0Params,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<PermitDataMainV0>({ url: `/api/v0/permit/data`, method: 'GET', params }, options);
};

/**
 * Returns tokens permit signature
 * @summary Gets permit transaction
 */
export const getPermitTransactionMainV0 = (
  params: GetPermitTransactionMainV0Params,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<PermitTransactionMainV0>(
    { url: `/api/v0/permit/transaction`, method: 'GET', params },
    options,
  );
};

/**
 * Returns quote
 * @summary Get quote
 */
export const getQuoteMainV0 = (params: GetQuoteMainV0Params, options?: SecondParameter<typeof axiosClientMainV0>) => {
  return axiosClientMainV0<QuoteMainV0>({ url: `/api/v0/quote`, method: 'GET', params }, options);
};

/**
 * Creates swap
 * @summary Create swap
 */
export const createSwapMainV0 = (
  createSwapMainV0: CreateSwapMainV0,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<SwapMainV0>(
    { url: `/api/v0/swaps`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: createSwapMainV0 },
    options,
  );
};

/**
 * Returns swap
 * @summary Get swap
 */
export const getSwapMainV0 = (swapHash: string, options?: SecondParameter<typeof axiosClientMainV0>) => {
  return axiosClientMainV0<SwapMainV0>({ url: `/api/v0/swaps/${swapHash}`, method: 'GET' }, options);
};

/**
 * Returns swap data
 * @summary Get swap data
 */
export const getSwapDataMainV0 = (swapHash: string, options?: SecondParameter<typeof axiosClientMainV0>) => {
  return axiosClientMainV0<SwapDataMainV0>({ url: `/api/v0/swaps/${swapHash}/data`, method: 'GET' }, options);
};

/**
 * Submits signed order
 * @summary Confirm swap
 */
export const submitSwapMainV0 = (
  swapHash: string,
  submitSwapMainV0: SubmitSwapMainV0,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<SwapMainV0>(
    {
      url: `/api/v0/swaps/${swapHash}/submit`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: submitSwapMainV0,
    },
    options,
  );
};

/**
 * Returns call data to receive swap manually
 * @summary Receive swap manually
 */
export const manualReceiveMainV0 = (swapHash: string, options?: SecondParameter<typeof axiosClientMainV0>) => {
  return axiosClientMainV0<TransactionDataMainV0>(
    { url: `/api/v0/swaps/${swapHash}/manual_receive`, method: 'GET' },
    options,
  );
};

/**
 * Returns call data to liquidate swap
 * @summary Liquidate swap
 */
export const liqSendMainV0 = (
  swapHash: string,
  params: LiqSendMainV0Params,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<TransactionDataMainV0>(
    { url: `/api/v0/swaps/${swapHash}/liq_send`, method: 'GET', params },
    options,
  );
};

/**
 * Returns call data to report no-send
 * @summary Prepare swap withdraw
 */
export const reportNoSendMainV0 = (
  swapHash: string,
  params: ReportNoSendMainV0Params,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<TransactionDataMainV0>(
    { url: `/api/v0/swaps/${swapHash}/report_no_send`, method: 'GET', params },
    options,
  );
};

/**
 * Returns call data to slash swap
 * @summary Slash swap
 */
export const slashMainV0 = (
  swapHash: string,
  params: SlashMainV0Params,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<TransactionDataMainV0>(
    { url: `/api/v0/swaps/${swapHash}/slash`, method: 'GET', params },
    options,
  );
};

/**
 * Returns call data to liq slash swap
 * @summary Liq slash swap
 */
export const liqSlashMainV0 = (
  swapHash: string,
  params: LiqSlashMainV0Params,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<TransactionDataMainV0>(
    { url: `/api/v0/swaps/${swapHash}/liq_slash`, method: 'GET', params },
    options,
  );
};

/**
 * Returns call data to confirm swap
 * @summary Confirm swap
 */
export const confirmSwapMainV0 = (
  swapHash: string,
  params: ConfirmSwapMainV0Params,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<TransactionDataMainV0>(
    { url: `/api/v0/swaps/${swapHash}/confirm`, method: 'GET', params },
    options,
  );
};

/**
 * Returns states for the requests swap hashes
 * @summary Get swap states
 */
export const getStatesMainV0 = (params: GetStatesMainV0Params, options?: SecondParameter<typeof axiosClientMainV0>) => {
  return axiosClientMainV0<SwapStatesMainV0>({ url: `/api/v0/states`, method: 'GET', params }, options);
};

/**
 * Returns user swaps
 * @summary Get user swaps
 */
export const getUserSwapsMainV0 = (
  address: string,
  params?: GetUserSwapsMainV0Params,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<SwapListMainV0>({ url: `/api/v0/users/${address}/swaps`, method: 'GET', params }, options);
};

/**
 * Returns resolver list
 * @summary Get resolvers
 */
export const getResolverListMainV0 = (options?: SecondParameter<typeof axiosClientMainV0>) => {
  return axiosClientMainV0<ResolverListMainV0>({ url: `/api/v0/resolvers`, method: 'GET' }, options);
};

/**
 * Returns resolver by address
 * @summary Get resolver
 */
export const getResolverMainV0 = (address: string, options?: SecondParameter<typeof axiosClientMainV0>) => {
  return axiosClientMainV0<ResolverMainV0>({ url: `/api/v0/resolvers/${address}`, method: 'GET' }, options);
};

/**
 * Returns resolver balance
 * @summary Get resolver balance
 */
export const getBalanceMainV0 = (
  address: string,
  params: GetBalanceMainV0Params,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<BalanceInfoMainV0>(
    { url: `/api/v0/resolvers/${address}/balance`, method: 'GET', params },
    options,
  );
};

/**
 * Returns resolver collateral info
 * @summary Get resolver collateral
 */
export const getCollateralMainV0 = (
  address: string,
  params: GetCollateralMainV0Params,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<CollateralInfoMainV0>(
    { url: `/api/v0/resolvers/${address}/collateral`, method: 'GET', params },
    options,
  );
};

/**
 * Creates tm
 * @summary Create tmt
 */
export const createTmMainV0 = (createTMMainV0: CreateTMMainV0, options?: SecondParameter<typeof axiosClientMainV0>) => {
  return axiosClientMainV0<EventCreatedMainV0>(
    { url: `/api/v0/tm`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: createTMMainV0 },
    options,
  );
};

/**
 * Returns agreement message
 * @summary Get agreement message
 */
export const getMessageMainV0 = (options?: SecondParameter<typeof axiosClientMainV0>) => {
  return axiosClientMainV0<AgreementMessageMainV0>({ url: `/api/v0/agreement/message`, method: 'GET' }, options);
};

/**
 * Creates agreement user
 * @summary Create user
 */
export const createUserMainV0 = (
  createAgreementUserMainV0: CreateAgreementUserMainV0,
  options?: SecondParameter<typeof axiosClientMainV0>,
) => {
  return axiosClientMainV0<AgreementUserMainV0>(
    {
      url: `/api/v0/agreement/users`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createAgreementUserMainV0,
    },
    options,
  );
};

/**
 * Returns agreement user
 * @summary Get user
 */
export const getUserMainV0 = (address: string, options?: SecondParameter<typeof axiosClientMainV0>) => {
  return axiosClientMainV0<AgreementUserMainV0>({ url: `/api/v0/agreement/users/${address}`, method: 'GET' }, options);
};

/**
 * Returns chains where smart wallet can be deployed
 * @summary Get smart wallet chains
 */
export const getSmartWalletChainsMainV0 = (options?: SecondParameter<typeof axiosClientMainV0>) => {
  return axiosClientMainV0<SmartWalletChainsMainV0>({ url: `/api/v0/smart/deploy/chains`, method: 'GET' }, options);
};

/**
 * Returns alert message
 * @summary Get alert
 */
export const getAlertMainV0 = (options?: SecondParameter<typeof axiosClientMainV0>) => {
  return axiosClientMainV0<AlertMainV0>({ url: `/api/v0/alert`, method: 'GET' }, options);
};

export type GetAllowanceMainV0Result = NonNullable<Awaited<ReturnType<typeof getAllowanceMainV0>>>;
export type GetApproveMainV0Result = NonNullable<Awaited<ReturnType<typeof getApproveMainV0>>>;
export type GetPermitDataMainV0Result = NonNullable<Awaited<ReturnType<typeof getPermitDataMainV0>>>;
export type GetPermitTransactionMainV0Result = NonNullable<Awaited<ReturnType<typeof getPermitTransactionMainV0>>>;
export type GetQuoteMainV0Result = NonNullable<Awaited<ReturnType<typeof getQuoteMainV0>>>;
export type CreateSwapMainV0Result = NonNullable<Awaited<ReturnType<typeof createSwapMainV0>>>;
export type GetSwapMainV0Result = NonNullable<Awaited<ReturnType<typeof getSwapMainV0>>>;
export type GetSwapDataMainV0Result = NonNullable<Awaited<ReturnType<typeof getSwapDataMainV0>>>;
export type SubmitSwapMainV0Result = NonNullable<Awaited<ReturnType<typeof submitSwapMainV0>>>;
export type ManualReceiveMainV0Result = NonNullable<Awaited<ReturnType<typeof manualReceiveMainV0>>>;
export type LiqSendMainV0Result = NonNullable<Awaited<ReturnType<typeof liqSendMainV0>>>;
export type ReportNoSendMainV0Result = NonNullable<Awaited<ReturnType<typeof reportNoSendMainV0>>>;
export type SlashMainV0Result = NonNullable<Awaited<ReturnType<typeof slashMainV0>>>;
export type LiqSlashMainV0Result = NonNullable<Awaited<ReturnType<typeof liqSlashMainV0>>>;
export type ConfirmSwapMainV0Result = NonNullable<Awaited<ReturnType<typeof confirmSwapMainV0>>>;
export type GetStatesMainV0Result = NonNullable<Awaited<ReturnType<typeof getStatesMainV0>>>;
export type GetUserSwapsMainV0Result = NonNullable<Awaited<ReturnType<typeof getUserSwapsMainV0>>>;
export type GetResolverListMainV0Result = NonNullable<Awaited<ReturnType<typeof getResolverListMainV0>>>;
export type GetResolverMainV0Result = NonNullable<Awaited<ReturnType<typeof getResolverMainV0>>>;
export type GetBalanceMainV0Result = NonNullable<Awaited<ReturnType<typeof getBalanceMainV0>>>;
export type GetCollateralMainV0Result = NonNullable<Awaited<ReturnType<typeof getCollateralMainV0>>>;
export type CreateTmMainV0Result = NonNullable<Awaited<ReturnType<typeof createTmMainV0>>>;
export type GetMessageMainV0Result = NonNullable<Awaited<ReturnType<typeof getMessageMainV0>>>;
export type CreateUserMainV0Result = NonNullable<Awaited<ReturnType<typeof createUserMainV0>>>;
export type GetUserMainV0Result = NonNullable<Awaited<ReturnType<typeof getUserMainV0>>>;
export type GetSmartWalletChainsMainV0Result = NonNullable<Awaited<ReturnType<typeof getSmartWalletChainsMainV0>>>;
export type GetAlertMainV0Result = NonNullable<Awaited<ReturnType<typeof getAlertMainV0>>>;
